#!/bin/bash

max_questions=37


questions_nbr=${1:-$max_questions}


# Terminal styles...
bold=`tput bold`
underline=`tput smul`
black=`tput setaf 0`
red=`tput setaf 1`
yellow=`tput setaf 3`
green=`tput setaf 2`
blue=`tput setaf 4`
magenta=`tput setaf 5`
reset=`tput sgr0`
bell=`tput bel`

if [ $questions_nbr -lt 1 ]
then
    echo "${bold}${red}${underline}Please enter a valid number ( > 0 && <= $max_questions )"
    exit 1
elif [ $questions_nbr -gt $max_questions ]
then
    echo "${bold}${red}${underline}Please enter a valid number ( > 0 && <= $max_questions )"
    exit 1
fi

langs=("fr" "en" "es")
current_lang=langs[0]

path_q="srcs/${current_lang}/questions.txt"
path_answ="srcs/${current_lang}/answers/"
path_responses="srcs/responses.txt"

function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

function select_opt {
    select_option "$@" 1>&2
    local result=$?
    echo $result
    return $result
}

containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}


passed_questions=()

# This function takes as an argument the upper limit ie. questions_nbr here
# We increate random_nbr by one after the modulo in order to get the upper limit question
# as we use %.

function pick_random_max() {
    local random_nbr=$RANDOM
    let "random_nbr %= $1"
    let "random_nbr = random_nbr + 1"
    containsElement $random_nbr "${passed_questions[@]}"
    while [ $? == 0 ]
        do
        random_nbr=$RANDOM
        let "random_nbr %= $1"
        let "random_nbr = random_nbr + 1"
        containsElement $random_nbr "${passed_questions[@]}"
        done
    passed_questions+=($random_nbr)
    return $random_nbr
}

function set_phrases_lang() {
    if [ $current_lang == "en" ]
    then
    good_answer="Good answer !"
    bad_answer="Wrong answer !"
    answer_was="The right answer was :"
    final_score="Final score :"
    elif [ $current_lang == "es" ]
    then
    good_answer="Buena respuesta !"
    bad_answer="Respuesta incorrecta !"
    answer_was="La respuesta correcta fue :"
    final_score="Resultado final :"
    else
    good_answer="Bonne reponse !"
    bad_answer="Mauvaise reponse !"
    answer_was="La bonne reponse etait :"
    final_score="Score final :"
    fi
}

function set_lang() {
    echo -e "${bell}${underline}${bold}${yellow}Please select the language / Veuillez choisir la langue / Por favor, elige un idioma\n${reset}"
    case `select_opt "${langs[@]}"` in
    *)
    current_lang=${langs[$?]}
    ;;
    esac
    path_q="srcs/${current_lang}/questions.txt"
    path_answ="srcs/${current_lang}/answers/"
    set_phrases_lang
}

function display_question_nbr() {
    echo -e "${bold}${underline}${magenta}${questions_nbr} questions\n${reset}${yellow}${bold}${underline}"
}

display_question_nbr
set_lang

let "step = 1"
let "count = 0"
while [ $step -le $questions_nbr ]
	do
        pick_random_max $questions_nbr
        random=$?
		responses=()
		let "j = 0"
		echo -e "${bold}${underline}${blue}Question $step\n${reset}${yellow}${bold}${underline}"
		tail -n+$random $path_q | head -n1
		echo -e "\n${reset}"
		while IFS= read -r line
			do
  				responses[$j]=$line
				let "j = j + 1"
			done < "$path_answ$random.txt"
        response_nbr=`head -"$random" $path_responses | tail -1`
        let "index_opt_menu = $response_nbr - 1"
		case `select_opt "${responses[@]}"` in
			$index_opt_menu)
			echo -e "${underline}${bold}${green}${good_answer}\n\n${reset}"
			let "count = $count + 1"
			;;
    		*)
            echo -e "${bell}${underline}${bold}${red}${bad_answer}\n\n${reset}"
            echo -e "${underline}${bold}${answer_was}${reset}${bold}${green} ${responses[$index_opt_menu]}${reset}\n"
            ;;
		esac
		unset responses
		let "step = step + 1"
	done
if [ $count -ge $questions_nbr ]
then
	echo "${underline}${bold}Score final :${reset} ${bold}${green}${count}/${questions_nbr}"
else
	echo "${underline}${bold}Score final :${reset} ${bold}${red}${count}/${questions_nbr}"
fi
